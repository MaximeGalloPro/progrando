<div class="container py-4">
    <button id="undo" class="btn btn-primary mb-2">Supprimer le dernier point</button>
    <div id="map-container">
        <div id="map"></div>
    </div>
</div>

<style>
    #map-container {
        position: relative;
        height: 30rem;
    }

    #map {
        height: 100%;
        width: 100%;
        position: relative;
    }

    .custom-div-icon {
        background: none;
        border: none;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
<script type="module">
    const map = L.map('map').setView([42.5056, 8.8583], 10); // Vue centrée sur la Corse

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    let startPoint = null;
    let endPoint = null;
    let currentRoute;
    let startMarker = null;
    let endMarker = null;

    const apiKey = '5b3ce3597851110001cf6248d56a72cc718348038c651734f42f7749'; // Remplacez par votre clé API

    async function getRoute(start, end) {
        if (!start || !end) {
            console.log("Les deux points ne sont pas encore définis.");
            return;
        }

        const startStr = `${start[1]},${start[0]}`; // lng, lat
        const endStr = `${end[1]},${end[0]}`;       // lng, lat
        const url = `https://api.openrouteservice.org/v2/directions/foot-hiking?api_key=${apiKey}&start=${startStr}&end=${endStr}`;

        try {
            const response = await fetch(url);
            const data = await response.json();

            // Vérification des erreurs ou absence de données
            if (!data.features || data.features.length === 0) {
                console.error('Aucune route trouvée dans la réponse :', data);
                return;
            }

            if (currentRoute) {
                map.removeLayer(currentRoute);
            }

            currentRoute = L.geoJSON(data.features[0].geometry, {
                color: 'blue',
                weight: 4
            }).addTo(map);

            // Zoom sur la route générée
            const bounds = L.geoJSON(data.features[0].geometry).getBounds();
            map.fitBounds(bounds);
        } catch (error) {
            console.error('Erreur lors de la requête API:', error);
        }
    }

    map.on('click', function (e) {
        const coord = e.latlng;

        // Définir le point de départ si pas encore défini
        if (!startPoint) {
            startPoint = [coord.lat, coord.lng];
            if (startMarker) map.removeLayer(startMarker);
            startMarker = L.marker(coord, {
                title: "Point de départ"
            }).addTo(map);
            console.log("Point de départ défini :", startPoint);
            return;
        }

        // Définir le point d'arrivée si le départ est déjà défini
        if (!endPoint) {
            endPoint = [coord.lat, coord.lng];
            if (endMarker) map.removeLayer(endMarker);
            endMarker = L.marker(coord, {
                title: "Point d'arrivée"
            }).addTo(map);
            console.log("Point d'arrivée défini :", endPoint);

            // Tracer la route une fois les deux points définis
            getRoute(startPoint, endPoint);
        }
    });
</script>
