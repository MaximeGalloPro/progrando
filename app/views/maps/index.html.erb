<div class="container py-4">
    <div id="route-stats" class="mt-3">
        <p><strong>Distance :</strong> <span id="distance">0 km</span></p>
        <p><strong>Dénivelé + :</strong> <span id="elevation-gain">0 m</span></p>
        <p><strong>Dénivelé - :</strong> <span id="elevation-loss">0 m</span></p>
        <p><strong>Altitude min :</strong> <span id="min-altitude">0 m</span></p>
        <p><strong>Altitude max :</strong> <span id="max-altitude">0 m</span></p>
    </div>

    <div class="mb-2">
        <button id="undo" class="btn btn-primary">Supprimer le dernier point</button>
        <div class="form-check mt-2">
            <input class="form-check-input" type="checkbox" id="closeLoopCheckbox" />
            <label class="form-check-label" for="closeLoopCheckbox">Activer la fermeture de la boucle</label>
        </div>
    </div>
    <div id="map-container">
        <div id="map"></div>
    </div>
</div>

<style>
    #map-container {
        position: relative;
        height: 30rem;
    }

    #map {
        height: 100%;
        width: 100%;
        position: relative;
    }

    .custom-div-icon {
        background: none;
        border: none;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
<script type="module">
    const map = L.map('map').setView([44.0556, 5.1283], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    const points = []; // Tableau pour stocker les points
    let markers = [];  // Tableau pour stocker les marqueurs
    let currentRoute;

    const apiKey = '5b3ce3597851110001cf6248d56a72cc718348038c651734f42f7749';

    async function getRoute(points) {
        if (points.length < 2) {
            console.error('Au moins deux points sont nécessaires pour calculer un itinéraire.');
            return;
        }

        const url = `https://api.openrouteservice.org/v2/directions/foot-hiking/geojson?api_key=${apiKey}`;
        const coordinates = points.map(point => [point[1], point[0]]);

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    coordinates,
                    elevation: true // Demande des données d'altitude
                })
            });
            const data = await response.json();

            console.log("Réponse API OpenRouteService:", data); // Log des données brutes renvoyées

            if (!data.features || data.features.length === 0) {
                console.error('Aucune route trouvée dans la réponse :', data);
                return;
            }

            if (currentRoute) {
                map.removeLayer(currentRoute);
            }

            currentRoute = L.geoJSON(data, {
                style: { color: 'blue', weight: 4 }
            }).addTo(map);

            const bounds = currentRoute.getBounds();
            map.fitBounds(bounds);

            // Calcul et affichage des statistiques
            displayRouteStats(data);
        } catch (error) {
            console.error('Erreur lors de la requête API:', error);
        }
    }

    function displayRouteStats(data) {
        try {
            // Extraction des coordonnées et des altitudes
            const coordinates = data.features[0].geometry.coordinates;
            const altitudes = coordinates.map(coord => coord[2]); // Altitudes

            // Extraction des propriétés de l'itinéraire
            const summary = data.features[0].properties.summary;
            const properties = data.features[0].properties.segments[0];

            // Calcul de la distance
            const distance = summary.distance; // Distance en mètres
            document.getElementById('distance').textContent = (distance / 1000).toFixed(2) + ' km';

            // Calcul des dénivelés à partir des altitudes
            let elevationGain = 0;
            let elevationLoss = 0;

            for (let i = 1; i < altitudes.length; i++) {
                const diff = altitudes[i] - altitudes[i - 1];
                if (diff > 0) {
                    elevationGain += diff;
                } else {
                    elevationLoss -= diff;
                }
            }

            document.getElementById('elevation-gain').textContent = Math.round(elevationGain) + ' m';
            document.getElementById('elevation-loss').textContent = Math.round(elevationLoss) + ' m';

            // Calcul des altitudes minimale et maximale
            if (altitudes.length > 0) {
                const minAltitude = Math.min(...altitudes);
                const maxAltitude = Math.max(...altitudes);
                document.getElementById('min-altitude').textContent = Math.round(minAltitude) + ' m';
                document.getElementById('max-altitude').textContent = Math.round(maxAltitude) + ' m';
            } else {
                console.warn("Altitudes non trouvées dans les données.");
                document.getElementById('min-altitude').textContent = "Non disponible";
                document.getElementById('max-altitude').textContent = "Non disponible";
            }
        } catch (error) {
            console.error("Erreur lors du traitement des statistiques :", error);
        }
    }




    function addPoint(lat, lng, label) {
        const point = [lat, lng];
        points.push(point);
        const marker = L.marker([lat, lng], { title: label }).addTo(map);
        markers.push(marker);

        // Vérifie si trois points sont ajoutés pour fermer la boucle (si activée)
        const closeLoop = document.getElementById('closeLoopCheckbox').checked;
        if (points.length === 3 && closeLoop) {
            addClosingPoint();
        }

        if (points.length >= 2) {
            getRoute(points);
        }
    }

    function addClosingPoint() {
        if (points.length < 3) return;

        const firstPoint = points[0];
        points.push(firstPoint); // Ajoute le premier point à la fin du tableau
        const marker = L.marker(firstPoint, {
            title: "Point de départ (fermeture de la boucle)"
        }).addTo(map);
        markers.push(marker);

        getRoute(points); // Met à jour la route avec le point de fermeture
    }

    function removeLastPoint() {
        if (points.length === 0) return;

        points.pop();
        const marker = markers.pop();
        map.removeLayer(marker);

        if (points.length >= 2) {
            getRoute(points);
        } else if (currentRoute) {
            map.removeLayer(currentRoute);
        }
    }

    map.on('click', function (e) {
        const { lat, lng } = e.latlng;
        addPoint(lat, lng, `Point ${points.length + 1}`);
    });

    document.getElementById('undo').addEventListener('click', () => {
        removeLastPoint();
    });
</script>
