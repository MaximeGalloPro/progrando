<%# app/views/stats/dashboard.html.erb %>
<% content_for :head do %>
    <meta name="turbo-visit-control" content="reload">
<% end %>

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Tableau de bord des randonnées</h1>
        <%= link_to "← Retour", :back, class: "btn btn-outline-secondary" %>
    </div>

    <%# Cartes de statistiques %>
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title text-muted">Total Randonnées</h6>
                    <h2 class="card-text"><%= @stats[:total_hikes] %></h2>
                    <small class="text-muted">Sur l'année en cours</small>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title text-muted">Distance Totale</h6>
                    <h2 class="card-text"><%= number_with_delimiter(@stats[:total_distance]) %> km</h2>
                    <small class="text-muted">Distance cumulée</small>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title text-muted">Dénivelé Total</h6>
                    <h2 class="card-text"><%= number_with_delimiter(@stats[:total_elevation]) %>m</h2>
                    <small class="text-muted">Dénivelé cumulé</small>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title text-muted">Guides Actifs</h6>
                    <h2 class="card-text"><%= @stats[:active_guides] %></h2>
                    <small class="text-muted">Ce mois-ci</small>
                </div>
            </div>
        </div>
    </div>

    <%# Graphiques %>
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Randonnées par mois</h5>
                    <div style="height: 300px;">
                        <canvas id="monthlyChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Top Guides</h5>
                    <div style="height: 300px;">
                        <canvas id="guidesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%# Tableau récapitulatif %>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Dernières randonnées</h5>
            <div class="table-responsive">
                <table class="table table-sm">
                    <thead>
                    <tr>
                        <th>Date</th>
                        <th>Randonnée</th>
                        <th>Guide</th>
                        <th>Distance</th>
                        <th>Dénivelé</th>
                    </tr>
                    </thead>
                    <tbody>
                    <% @stats[:recent_hikes].each do |hike| %>
                        <tr>
                            <td><%= hike.hiking_date.strftime("%d/%m/%Y") %></td>
                            <td><%= hike.trail_name %></td>
                            <td><%= hike.guide_name %></td>
                            <td><%= hike.distance_km %> km</td>
                            <td><%= hike.elevation_gain %>m</td>
                        </tr>
                    <% end %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script type="module">
    const DEBUG = true;
    function log(message, data = null) {
        if (DEBUG) {
            if (data) {
                console.log(`[Dashboard Debug] ${message}:`, data);
            } else {
                console.log(`[Dashboard Debug] ${message}`);
            }
        }
    }

    // Variable globale pour stocker les instances de graphiques
    let charts = {
        monthly: null,
        guides: null
    };

    // Fonction pour nettoyer les graphiques existants
    function cleanupCharts() {
        log('Cleaning up charts...');
        log('Current charts state:', charts);

        if (charts.monthly instanceof Chart) {
            log('Destroying monthly chart');
            charts.monthly.destroy();
            charts.monthly = null;
        }
        if (charts.guides instanceof Chart) {
            log('Destroying guides chart');
            charts.guides.destroy();
            charts.guides = null;
        }

        log('Charts cleanup completed');
    }

    // Fonction pour initialiser les graphiques
    function initializeCharts() {
        log('Initializing charts...');
        log('Chart.js availability:', typeof Chart !== 'undefined');

        // S'assurer que Chart.js est chargé
        if (typeof Chart === 'undefined') {
            console.error('Chart.js not loaded - abandoning initialization');
            return;
        }

        // Nettoyer les graphiques existants
        cleanupCharts();

        // Configuration commune pour les graphiques
        const commonOptions = {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: {
                    position: 'top',
                },
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        };

        // Récupérer les éléments canvas
        const monthlyChartEl = document.getElementById('monthlyChart');
        const guidesChartEl = document.getElementById('guidesChart');

        log('Canvas elements found:', {
            monthlyChart: !!monthlyChartEl,
            guidesChart: !!guidesChartEl
        });

        if (monthlyChartEl) {
            log('Creating monthly chart with data:', {
                labels: <%= raw @stats[:monthly_stats].keys %>,
                values: <%= raw @stats[:monthly_stats].values %>
            });

            try {
                charts.monthly = new Chart(monthlyChartEl, {
                    type: 'line',
                    data: {
                        labels: <%= raw @stats[:monthly_stats].keys %>,
                        datasets: [{
                            label: 'Nombre de randonnées',
                            data: <%= raw @stats[:monthly_stats].values %>,
                            borderColor: '#0d6efd',
                            tension: 0.1,
                            fill: false
                        }]
                    },
                    options: commonOptions
                });
                log('Monthly chart created successfully');
            } catch (error) {
                console.error('Error creating monthly chart:', error);
            }
        }

        if (guidesChartEl) {
            log('Creating guides chart with data:', {
                labels: <%= raw @stats[:guide_stats].keys.reject(&:blank?) %>,
                values: <%= raw @stats[:guide_stats].values %>
            });

            try {
                charts.guides = new Chart(guidesChartEl, {
                    type: 'bar',
                    data: {
                        labels: <%= raw @stats[:guide_stats].keys.reject(&:blank?) %>,
                        datasets: [{
                            label: 'Randonnées guidées',
                            data: <%= raw @stats[:guide_stats].values %>,
                            backgroundColor: '#0d6efd'
                        }]
                    },
                    options: commonOptions
                });
                log('Guides chart created successfully');
            } catch (error) {
                console.error('Error creating guides chart:', error);
            }
        }

        log('Charts initialization completed');
    }

    // Fonction pour s'assurer que le code est exécuté après chaque navigation Turbo
    function setupCharts() {
        log('Setting up charts...');
        log('Chart.js availability:', typeof Chart !== 'undefined');
        initializeCharts();
    }

    // Utilisation d'une fonction d'initialisation globale
    window.initDashboardCharts = function() {
        log('Global initialization called');
        setupCharts();
    };

    // Écouteurs d'événements pour Turbo
    document.addEventListener('turbo:load', () => {
        log('turbo:load event fired');
        window.initDashboardCharts();
    });

    document.addEventListener('turbo:render', () => {
        log('turbo:render event fired');
        window.initDashboardCharts();
    });

    document.addEventListener('turbo:before-render', () => {
        log('turbo:before-render event fired');
        cleanupCharts();
    });

    // Initialisation au chargement initial de la page
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', window.initDashboardCharts);
    } else {
        window.initDashboardCharts();
    }
</script>