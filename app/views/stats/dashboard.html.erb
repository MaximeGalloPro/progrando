<%# app/views/stats/dashboard.html.erb %>
<% content_for :head do %>
    <meta name="turbo-visit-control" content="reload">
<% end %>

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Tableau de bord des randonnées</h1>
        <%= link_to "← Retour", :back, class: "btn btn-outline-secondary" %>
    </div>

    <%# Cartes de statistiques %>
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title text-muted">Total Randonnées</h6>
                    <h2 class="card-text"><%= @stats[:total_hikes] %></h2>
                    <small class="text-muted">Sur l'année en cours</small>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title text-muted">Distance Totale</h6>
                    <h2 class="card-text"><%= number_with_delimiter(@stats[:total_distance].round(2)) %> km</h2>
                    <small class="text-muted">Distance cumulée</small>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title text-muted">Dénivelé Total</h6>
                    <h2 class="card-text"><%= number_with_delimiter(@stats[:total_elevation]) %> km</h2>
                    <small class="text-muted">Dénivelé cumulé</small>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title text-muted">Guides Actifs</h6>
                    <h2 class="card-text"><%= @stats[:active_guides] %></h2>
                    <small class="text-muted">Ce mois-ci</small>
                </div>
            </div>
        </div>
    </div>

    <%# Graphiques %>
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Randonnées par mois</h5>
                    <div style="height: 300px;">
                        <canvas id="monthlyChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Top Guides</h5>
                    <div style="height: 300px;">
                        <canvas id="guidesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <h3>Les 10 derniéres randonnées</h3>

    <% if @last_hikes.any? %>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-light">
                <tr>
                    <th scope="col">Randonnée</th>
                    <th scope="col">Point de départ</th>
                    <th scope="col">Distance (km)</th>
                    <th scope="col">D+ (m)</th>
                    <th scope="col">D- (m)</th>
                    <th scope="col">Alt min (m)</th>
                    <th scope="col">Alt max (m)</th>
                    <th scope="col">Difficulté</th>
                    <th scope="col">Dernière date</th>
                    <th scope="col">Dernier guide</th>
                    <th scope="col">Actions</th>
                </tr>
                </thead>
                <tbody>
                <% @last_hikes.each do |hike| %>
                    <tr>
                        <td><%= hike.trail_name %></td>
                        <td><%= hike.starting_point %></td>
                        <td><%= hike.distance_km %></td>
                        <td><%= hike.elevation_gain %></td>
                        <td><%= hike.elevation_loss %></td>
                        <td><%= hike.altitude_min %></td>
                        <td><%= hike.altitude_max %></td>
                        <td><%= hike.difficulty_text %></td>
                        <td><%= hike.last_hiking_date&.strftime("%d/%m/%Y") %></td>
                        <td><%= hike['guide_name'] %></td>
                        <td class="text-nowrap">
                            <div class="btn-group">
                                <% if hike.updating? %>
                                    <button class="btn btn-outline-dark btn-sm" disabled>
                                        <i class="fas fa-sync-alt fa-spin"></i>
                                    </button>
                                <% elsif hike.openrunner_ref.blank? or hike.openrunner_ref == 0 or hike.openrunner_ref == "0" %>
                                    <button class="btn btn-outline-dark btn-sm" disabled title="Pas de référence OpenRunner">
                                        <i class="fas fa-ban text-danger" title="Pas de référence OpenRunner"></i>
                                    </button>
                                <% else %>
                                    <%= link_to "https://www.openrunner.com/route-details/#{hike.openrunner_ref}",
                                                class: "btn btn-outline-dark btn-sm",
                                                target: "_blank",
                                                title: "Voir sur OpenRunner" do %>
                                        <i class="fas fa-mountain"></i>
                                    <% end %>
                                <% end %>

                                <%= link_to hike_histories_path(hike_id: hike.id),
                                            class: "btn btn-outline-dark btn-sm",
                                            title: "Voir l'historique" do %>
                                    <i class="fas fa-history"></i>
                                <% end %>
                                <%= link_to edit_hike_path(hike),
                                            class: "btn btn-outline-dark btn-sm",
                                            title: "Editer" do %>
                                    <i class="fas fa-pen"></i>
                                <% end %>
                                <%= button_to hike_path(hike),
                                              method: :delete,
                                              class: "btn btn-outline-dark btn-sm delete-hike",
                                              title: "Supprimer",
                                              form: { style: 'display: inline-block', onsubmit: "return confirmDelete(event)" },
                                              form_class: 'button_to' do %>
                                    <i class="fas fa-trash"></i>
                                <% end %>
                                <script>
                                    function confirmDelete(event) {
                                        event.preventDefault();
                                        if (confirm("Êtes-vous sûr de vouloir supprimer cette randonnée ?")) {
                                            event.target.submit();
                                        }
                                        return false;
                                    }
                                </script>
                                <% if hike.updating? %>
                                    <button class="btn btn-outline-dark btn-sm" disabled>
                                        <i class="fas fa-sync-alt fa-spin"></i>
                                    </button>
                                <% elsif hike.openrunner_ref.blank? or hike.openrunner_ref == 0 or hike.openrunner_ref == "0" %>
                                    <button class="btn btn-outline-dark btn-sm" disabled title="Pas de référence OpenRunner">
                                        <i class="fas fa-ban text-danger" title="Pas de référence OpenRunner"></i>
                                    </button>
                                <% else %>
                                    <%= button_to refresh_from_openrunner_hike_path(hike, redirect_path: stats_dashboard_path),
                                                  class: "btn btn-outline-dark btn-sm",
                                                  title: "Dernière mise à jour: #{hike.last_update_attempt&.strftime('%d/%m/%Y %H:%M') || 'Jamais'}",
                                                  data: { turbo: false },
                                                  params: { search: params[:search] } do %>
                                        <i class="fas fa-sync-alt"></i>
                                    <% end %>
                                <% end %>
                            </div>
                        </td>
                    </tr>
                <% end %>
                </tbody>
            </table>
        </div>
    <% elsif params[:trail_name].present? || params[:starting_point].present? %>
        <div class="alert alert-info" role="alert">
            Aucun résultat trouvé pour votre recherche
        </div>
    <% end %>
</div>

<script>
    // Debug logger avec timestamp pour mieux suivre l'ordre des événements
    const DEBUG = true;

    function log(message, data = null) {
        if (DEBUG) {
            const timestamp = new Date().toISOString().substr(11, 8);
            if (data) {
                console.log(`[Dashboard Debug ${timestamp}] ${message}:`, data);
            } else {
                console.log(`[Dashboard Debug ${timestamp}] ${message}`);
            }
        }
    }

    // Log initial pour vérifier le chargement du script
    log('Script loaded');
    log('Window.Chart availability:', typeof window.Chart !== 'undefined');

    // Variable globale pour stocker les instances de graphiques
    let charts = {
        monthly: null,
        guides: null
    };

    // Fonction pour nettoyer les graphiques existants
    function cleanupCharts() {
        log('Cleaning up charts...');

        if (charts.monthly instanceof window.Chart) {
            log('Destroying monthly chart');
            charts.monthly.destroy();
            charts.monthly = null;
        }
        if (charts.guides instanceof window.Chart) {
            log('Destroying guides chart');
            charts.guides.destroy();
            charts.guides = null;
        }
    }

    // Fonction pour initialiser les graphiques
    function initializeCharts() {
        log('Initializing charts...');
        log('Window.Chart availability:', typeof window.Chart !== 'undefined');

        // Vérifier si Chart.js est chargé
        if (typeof window.Chart === 'undefined') {
            console.error('Chart.js not loaded');
            return;
        }

        // Nettoyer les graphiques existants
        cleanupCharts();

        // Configuration commune pour les graphiques
        const commonOptions = {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: {
                    position: 'top',
                },
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        };

        // Récupérer et logger l'état des éléments canvas
        const monthlyChartEl = document.getElementById('monthlyChart');
        const guidesChartEl = document.getElementById('guidesChart');

        log('Canvas elements state:', {
            monthlyChart: {
                exists: !!monthlyChartEl,
                parentNode: monthlyChartEl?.parentNode?.tagName,
                width: monthlyChartEl?.width,
                height: monthlyChartEl?.height
            },
            guidesChart: {
                exists: !!guidesChartEl,
                parentNode: guidesChartEl?.parentNode?.tagName,
                width: guidesChartEl?.width,
                height: guidesChartEl?.height
            }
        });

        if (monthlyChartEl) {
            try {
                log('Creating monthly chart');
                charts.monthly = new window.Chart(monthlyChartEl, {
                    type: 'line',
                    data: {
                        labels: <%= raw @stats[:monthly_stats].keys %>,
                        datasets: [{
                            label: 'Nombre de randonnées',
                            data: <%= raw @stats[:monthly_stats].values %>,
                            borderColor: '#0d6efd',
                            tension: 0.1,
                            fill: false
                        }]
                    },
                    options: commonOptions
                });
                log('Monthly chart created successfully');
            } catch (error) {
                console.error('Error creating monthly chart:', error);
            }
        }
        if (guidesChartEl) {
            try {
                log('Creating guides chart');
                charts.guides = new window.Chart(guidesChartEl, {
                    type: 'bar',
                    data: {
                        labels: <%= raw @stats[:guide_stats].keys.reject(&:blank?) %>,
                        datasets: [{
                            label: 'Randonnées guidées',
                            data: <%= raw @stats[:guide_stats].values %>,
                            backgroundColor: '#0d6efd'
                        }]
                    },
                    options: commonOptions
                });
                log('Guides chart created successfully');
            } catch (error) {
                console.error('Error creating guides chart:', error);
            }
        }
    }

    // Fonction pour s'assurer que le code est exécuté après chaque navigation Turbo
    function setupCharts() {
        log('Setting up charts...');
        // Vérifie si le script Chart.js est encore en cours de chargement
        if (typeof window.Chart === 'undefined') {
            log('Chart.js not loaded yet, checking script tags...');
            // Vérifie si le script est présent dans le DOM
            const chartScripts = document.querySelectorAll('script[src*="chart"]');
            log('Found Chart.js script tags:', chartScripts.length);
        }
        initializeCharts();
    }

    // Utilisation d'une fonction d'initialisation globale
    window.initDashboardCharts = function () {
        log('Global initialization called');
        setupCharts();
    };

    // Écouteurs d'événements pour Turbo et chargement initial
    document.addEventListener('turbo:load', () => {
        log('turbo:load event fired');
        window.initDashboardCharts();
    });

    document.addEventListener('turbo:render', () => {
        log('turbo:render event fired');
        window.initDashboardCharts();
    });

    document.addEventListener('turbo:before-render', () => {
        log('turbo:before-render event fired');
        cleanupCharts();
    });

    // S'assurer que l'initialisation se fait même si turbo:load ne se déclenche pas
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', window.initDashboardCharts);
    } else {
        window.initDashboardCharts();
    }
</script>

<script>
    document.addEventListener('turbo:load', function () {
        console.log('Turbo est actif');
    });
    console.log('Page chargée normalement');
</script>