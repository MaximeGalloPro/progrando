<div class="row mb-4">
    <div class="col-md-6 mb-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Randonnées par mois</h5>
                <div class="chart-container">
                    <canvas id="monthlyChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6 mb-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Top Guides</h5>
                <div class="chart-container">
                    <canvas id="guidesChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .chart-container {
        position: relative;
        height: 300px;
    }

    @media (max-width: 768px) {
        .chart-container {
            height: 11rem;
        }
    }
</style>

<script>
    // Debug logger avec timestamp pour mieux suivre l'ordre des événements
    const DEBUG = true;

    function log(message, data = null) {
        if (DEBUG) {
            const timestamp = new Date().toISOString().substr(11, 8);
            if (data) {
                console.log(`[Dashboard Debug ${timestamp}] ${message}:`, data);
            } else {
                console.log(`[Dashboard Debug ${timestamp}] ${message}`);
            }
        }
    }

    // Log initial pour vérifier le chargement du script
    log('Script loaded');
    log('Window.Chart availability:', typeof window.Chart !== 'undefined');

    // Variable globale pour stocker les instances de graphiques
    let charts = {
        monthly: null,
        guides: null
    };

    // Fonction pour nettoyer les graphiques existants
    function cleanupCharts() {
        log('Cleaning up charts...');

        if (charts.monthly instanceof window.Chart) {
            log('Destroying monthly chart');
            charts.monthly.destroy();
            charts.monthly = null;
        }
        if (charts.guides instanceof window.Chart) {
            log('Destroying guides chart');
            charts.guides.destroy();
            charts.guides = null;
        }
    }

    // Fonction pour obtenir les options de thème pour Chart.js
    function getChartThemeOptions() {
        const isDarkTheme = !document.body.classList.contains('light-theme');
        const textColor = isDarkTheme ? 'var(--text-color)' : '#1e293b';
        const gridColor = isDarkTheme ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
        const accentColor = getComputedStyle(document.documentElement).getPropertyValue('--accent-color').trim();
        const borderColor = getComputedStyle(document.documentElement).getPropertyValue('--border-color').trim();

        return {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        color: textColor,
                        font: {
                            size: 12
                        },
                        padding: 20
                    }
                },
                tooltip: {
                    backgroundColor: isDarkTheme ? 'var(--item-hover)' : 'rgba(255, 255, 255, 0.9)',
                    titleColor: isDarkTheme ? '#FFFFFF' : textColor,
                    bodyColor: isDarkTheme ? '#FFFFFF' : textColor,
                    borderColor: isDarkTheme ? 'var(--accent-color)' : borderColor,
                    borderWidth: 1,
                    padding: 14,
                    displayColors: true,
                    usePointStyle: true,
                    titleFont: {
                        size: 14,
                        weight: 'bold'
                    },
                    bodyFont: {
                        size: 13
                    },
                    boxPadding: 6,
                    cornerRadius: 6,
                    opacity: 1
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1,
                        color: textColor,
                        padding: 8
                    },
                    grid: {
                        color: gridColor,
                        drawBorder: false
                    },
                    border: {
                        color: borderColor
                    }
                },
                x: {
                    ticks: {
                        color: textColor,
                        padding: 8
                    },
                    grid: {
                        color: gridColor,
                        drawBorder: false
                    },
                    border: {
                        color: borderColor
                    }
                }
            }
        };
    }

    // Fonction pour initialiser les graphiques
    function initializeCharts() {
        log('Initializing charts...');
        log('Window.Chart availability:', typeof window.Chart !== 'undefined');

        // Vérifier si Chart.js est chargé
        if (typeof window.Chart === 'undefined') {
            console.error('Chart.js not loaded');
            return;
        }

        // Nettoyer les graphiques existants
        cleanupCharts();

        const chartOptions = getChartThemeOptions();
        const accentColor = getComputedStyle(document.documentElement).getPropertyValue('--accent-color').trim();

        // Récupérer et logger l'état des éléments canvas
        const monthlyChartEl = document.getElementById('monthlyChart');
        const guidesChartEl = document.getElementById('guidesChart');

        log('Canvas elements state:', {
            monthlyChart: {
                exists: !!monthlyChartEl,
                parentNode: monthlyChartEl?.parentNode?.tagName,
                width: monthlyChartEl?.width,
                height: monthlyChartEl?.height
            },
            guidesChart: {
                exists: !!guidesChartEl,
                parentNode: guidesChartEl?.parentNode?.tagName,
                width: guidesChartEl?.width,
                height: guidesChartEl?.height
            }
        });

        if (monthlyChartEl) {
            try {
                log('Creating monthly chart');
                charts.monthly = new window.Chart(monthlyChartEl, {
                    type: 'line',
                    data: {
                        labels: <%= raw @stats[:monthly_stats].keys %>,
                        datasets: [{
                            label: 'Nombre de randonnées',
                            data: <%= raw @stats[:monthly_stats].values %>,
                            borderColor: accentColor,
                            backgroundColor: accentColor + '20', // Version transparente
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2,
                            pointRadius: 4,
                            pointHoverRadius: 6
                        }]
                    },
                    options: chartOptions
                });
                log('Monthly chart created successfully');
            } catch (error) {
                console.error('Error creating monthly chart:', error);
            }
        }

        if (guidesChartEl) {
            try {
                log('Creating guides chart');
                charts.guides = new window.Chart(guidesChartEl, {
                    type: 'bar',
                    data: {
                        labels: <%= raw @stats[:guide_stats].keys.reject(&:blank?) %>,
                        datasets: [{
                            label: 'Randonnées guidées',
                            data: <%= raw @stats[:guide_stats].values %>,
                            backgroundColor: accentColor + '80', // Version semi-transparente
                            borderColor: accentColor,
                            borderWidth: 1,
                            borderRadius: 4,
                            hoverBackgroundColor: accentColor
                        }]
                    },
                    options: chartOptions
                });
                log('Guides chart created successfully');
            } catch (error) {
                console.error('Error creating guides chart:', error);
            }
        }
    }

    // Fonction pour s'assurer que le code est exécuté après chaque navigation Turbo
    function setupCharts() {
        log('Setting up charts...');
        // Vérifie si le script Chart.js est encore en cours de chargement
        if (typeof window.Chart === 'undefined') {
            log('Chart.js not loaded yet, checking script tags...');
            // Vérifie si le script est présent dans le DOM
            const chartScripts = document.querySelectorAll('script[src*="chart"]');
            log('Found Chart.js script tags:', chartScripts.length);
        }
        initializeCharts();
    }

    // Utilisation d'une fonction d'initialisation globale
    window.initDashboardCharts = function() {
        log('Global initialization called');
        setupCharts();
    };

    // Écouteurs d'événements pour Turbo et chargement initial
    document.addEventListener('turbo:load', () => {
        log('turbo:load event fired');
        window.initDashboardCharts();
    });

    document.addEventListener('turbo:render', () => {
        log('turbo:render event fired');
        window.initDashboardCharts();
    });

    document.addEventListener('turbo:before-render', () => {
        log('turbo:before-render event fired');
        cleanupCharts();
    });

    // Écouteur pour le changement de thème
    document.addEventListener('DOMContentLoaded', function() {
        const themeToggle = document.getElementById('themeToggle');
        if (themeToggle) {
            themeToggle.addEventListener('change', function() {
                // Recréer les graphiques avec les nouvelles options de thème
                initializeCharts();
            });
        }
    });

    // S'assurer que l'initialisation se fait même si turbo:load ne se déclenche pas
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', window.initDashboardCharts);
    } else {
        window.initDashboardCharts();
    }
</script>
