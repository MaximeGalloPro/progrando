continue
exclude_model.include?(self.class.name)
exclude_model
def exclude_model
        ['User', 'Organisation']
    end
exclude_model
exclude_model.include
exclude_model.include?(self.class.name)
self
continue
params
continue
params
continue
params[:profile]
params
continue
params
continue
request.patch?
continue
request.patch?
[7, 16] in /app/app/controllers/organisations_controller.rb
    7:     end
    8:
    9:     def switch
   10:         @organisations = current_user.super_admin ? Organisation.all : Organisation.where(id: current_user.organisations.pluck(:id))
   11:         byebug
=> 12:         if request.patch?
   13:             if @organisation and (current_user.super_admin || current_user.organisations.include?(@organisation))
   14:                 current_user.update(current_organisation_id: @organisation.id)
   15:                 redirect_to root_path, notice: "Vous utilisez maintenant l'organisation #{@organisation.name}"
   16:             else
(byebug) request.patch?
false
(byebug)
request.patch?
continue
request.patch?
continue
current_user&.super_admin
current_user&.profile
continue
subdomain
continue
"http://#{current_user.organisation.slug}.localhost:3000#{request.path}"
C"http://#{current_user.organisation.slug}.localhost:3000#{request.path}"
current_user
continue
request.host
subdomain.present?
 current_user && subdomain.present?
request.host != "#{current_user.organisation.slug}.localhost"
"#{current_user.organisation.slug}.localhost"
request.host
request.host != "#{current_user.organisation.slug}.localhost"
current_user&.organisation && request.host != "#{current_user.organisation.slug}.localhost"
current_user&.organisation
continue
"http://#{current_user.organisation.slug}.localhost:3000#{request.path}"
continue
"http://#{current_user.organisation.slug}.localhost:3000#{request.path}"
continue
"http://#{current_user.organisation.slug}.localhost:3000#{request.path}"
continue
"http://#{current_user.organisation.slug}.localhost:3000#{request.path}"
continue
"http://#{current_user.organisation.slug}.localhost:3000#{request.path}"
continue
"http://#{current_user.organisation.slug}.localhost:3000#{request.path}"
current_user.organisation.slug
continue
request.path
continue
request.path
continue
request.path
continue
request.path
continue
request.path
continue
request.path
current_user
continue
current_user
current_user && current_user.organisation
continue
request.path
current_user
current_user && current_user.organisation
continue
current_user
env
continue
 "http://#{current_user.organisation.slug}.localhost:3000#{request.path}"
request.path
current_user && current_user.organisation
 extract_subdomain(request.host)
n
devise_route?(request.path)
n
env['warden']&.user
current_user
n
current_user
n
request
n
continue
path
continue
path
pat
path.start_with?('/users/sign_in',
continue
path.start_with?('/users/sign_in',
                         '/users/sign_out',
                         '/users/password',
                         '/users/sign_up',
                         '/users/confirmation')
path
continue
path
path.start_with?('/users/sign_in',
                         '/users/sign_out',
                         '/users/password',
                         '/users/sign_up',
                         '/users/confirmation')
continue
"Organisation valide ? #{organisation.valid?}"
organisation.inspect
 "--- Organisation ---"
"Changes après save: #{test_member.previous_changes}"
test_member.save!
"Changes avant save: #{test_member.changes}"
test_member = Member.new(
  name: "Test Member",
  email: "test@test.com",
  phone: "1234567890",
  role: roles[:member],
  organisation_id: organisation.id
)
"--- Log des changements ---"
"Organisation après save: #{test_member.organisation&.id}"
test_member.save!
"Organisation avant save: #{test_member.organisation&.id}"
test_member.organisation = organisation
test_member = Member.new(
  name: "Test Member",
  email: "test@test.com",
  phone: "1234567890",
  role: roles[:member]
)
test_member.organisation = organisation
Member.reflect_on_all_associations.map(&:name)
Member.included_modules
Member._save_callbacks.map(&:filter)
test_member = Member.new(
  name: "Test Member",
  email: "test@test.com",
  phone: "1234567890",
  role: roles[:member],
  organisation_id: organisation.id
)
"Après save: #{test_member.organisation_id}"
test_member.save!
"Après validation: #{test_member.organisation_id}"
test_member.valid?
"Après new: #{test_member.organisation_id}"
test_member = Member.new(
  name: "Test Member",
  email: "test@test.com",
  phone: "1234567890",
  role: roles[:member],
  organisation_id: organisation.id
)
"Après save: #{test_member.organisation_id}"
test_member.save!
"Avant save: #{test_member.organisation_id}"
test_member = Member.new(
  name: "Test Member",
  email: "test@test.com",
  phone: "1234567890",
  role: roles[:member],
  organisation_id: organisation.id
)
test_member.organisation_id
puts test_member.organisation_id
test_member = Member.create!(
  name: "Test Member",
  email: "test@test.com",
  phone: "1234567890",
  role: roles[:member],
  organisation_id: organisation.id
)
organisation.id
Member
Member.pluck(:organisation_id)
Member.count
organisation.id
continue
organisation.id
orgranisation.id
Member.first
Member.where(organisation_id: organisation.id)
organisation.slug
organisation.sluf
continue
organisation
Member.where(organisation_id: organisation.id)
continue
@last_hikes
continue
can?(action, resource)
action
resource
continue
block
&block
html_options
name
options
action
resource
continue
role.errors
role
role = Role.create(name: 'guide')
Role.create(name: 'guide')
continue
        @hike_path = @hike.hike_path || HikePath.new(hike_id: @hike.id)
@hike.hike_path
continue
@hike.hike_path
continue
@hike_path = HikePath.new(coordinates: params[:hike][:coordinates])
params[:hike][:coordinates]
params[:hike]
params[:hikes]
params
continue
@hike_path
continue
@hike_path
continue
<%= button_to "Sauvegarder le tracé",
               routes_path,
               method: :post,
               params: { points: @points, hike_id: @hike.id },
               class: "btn btn-outline-success" %>
params
continue
@results.sort_by { |hike| hike.last_hiking_date || Date.new(9999, 12, 31) }
pp        @results.sort_by(&:last_hiking_date)
pp        @results.first.last_hiking_date
hike.last_hiking_date
